#!/usr/bin/python
import os
from datetime import datetime
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
# Perform operation on CPU to avoid loading of libraries for GPU (no training required)
os.environ['CUDA_VISIBLE_DEVICES'] = '-1'
import tensorflow as tf
from os import path
from sys import argv
from Model import MCModel
from Logger import debug, error, info
import numpy as np

def help(name):
    error("usage: {} <image_path> [<model_weights>]".format(name))
    exit()

if __name__ == '__main__':
    help(argv[0]) if len(argv) < 2 else None

    weigths_path = argv[2] if argv[2] else './weights_result'

    if not os.path.exists('{}.index'.format(weigths_path)):
        error('weights file {} does not exist or is unaccessible'.format(weigths_path))
        exit()
    else:
        try:
            discrimination_model = MCModel(6, 200, 3)
            #discrimination_model.build(input_shape=(200, 200, 1))#(discrimination_model.layer_input)
            discrimination_model.load_weights(weigths_path)
            discrimination_model.compile(optimizer=tf.keras.optimizers.Adam(), loss=tf.keras.losses.CategoricalCrossentropy(), metrics=['accuracy'])
        except Exception as ex:
            error('error during model loading: {}'.format(ex))
            exit()
        debug('model correctly loaded;summary is about to be shown')
        #discrimination_model.summary()

        debug('loading image {}'.format(argv[1]))
        #image = tf.keras.preprocessing.image.load_img(argv[1], color_mode="grayscale", target_size=(200,200))
        #image_array = tf.keras.preprocessing.image.img_to_array(image)
        #image_array = np.array([image_array])
        image_content = tf.io.read_file(argv[1])
        image = tf.image.decode_image(image_content, channels=3)
        image = tf.image.resize(image, [200, 200])
        image_array = np.array([image])
        prediction = discrimination_model.predict(image_array)
        info('prediction for the image: {}'.format(prediction))